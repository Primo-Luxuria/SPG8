<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Courses</title>
    <style>
        body { font-family: Arial, sans-serif; }
	    textarea {width: 100%;min-height: 100px;resize: vertical;font-size: 16px;padding: 8px;}
        .course-container { background: #f4f4f4; padding: 15px; margin: 15px 0; border-radius: 8px; width: 80%; }
        details { margin-top: 10px; padding: 10px; background: #e0e0e0; border-radius: 5px; }
        .remove-btn { background: red; color: white; padding: 8px; border: none; border-radius: 5px; cursor: pointer; margin-top: 10px;}
        .tab-container { margin-top: 10px; }
        .tabs { display: flex; cursor: pointer; border-bottom: 2px solid #cccccc; }
        .tab { padding: 8px 12px; border: 1px solid #cccccc; border-bottom: none; background: #d9d9d9; }
        .tab.active { background: #ffffff; font-weight: bold; }
        .tab-content { display: none; padding: 10px; height: 120px; overflow-y: auto; border: 1px solid #ccc; }
        .tab-content.active { display: block;}
        .add-btn { background: #0077C8; color: white; padding: 5px 10px; border: none; border-radius: 5px; cursor: pointer; margin-top: 10px;}
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); overflow:hidden; align-items:center; justify-content:center;}
        .modal-content { background: white; padding: 20px; width: 50%; max-height:80vh; overflow-y:auto; margin: 5% auto; border-radius: 10px;}
        .close-btn { background: red; color: white; padding: 5px 10px; border: none; border-radius: 5px; cursor: pointer;}
        .form-container {display: flex;flex-direction: column;align-items:left;padding: 20px;width: 300px;}
        .form-group {display: flex;align-items: left;margin-bottom: 10px;width: 100%;}
        .form-group label {width: 120px;text-align: right;margin-right: 10px;}
        .form-group input {flex: 1;}
        .context-menu {display: none;position: fixed;background: white;border: 1px solid #ccc;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);z-index: 1000;}
        .context-menu ul {list-style: none;margin: 0;padding: 0;}
        .context-menu ul li {padding: 8px 12px;cursor: pointer;}
        .context-menu ul li:hover {background: #f0f0f0;}
    </style>
</head>
<body>

    <h1>Manage Your Courses</h1>

    <!-- Course Input Form -->

    <div style="background:#e0e0e0;padding:20px;">
    <input type="text" id="courseID" placeholder="Enter Course ID" required>
    <input type="text" id="courseName" placeholder="Enter Course Name" required>
    <input type="text" id="courseCRN" placeholder="Enter CRN" required>
    <select id="courseSemester" required>
        <option value="" disabled selected>Select Semester</option>
        <option value="Spring">Spring</option>
        <option value="Summer">Summer</option>
        <option value="Fall">Fall</option>
        <option value="Winter">Winter</option>
    </select><br/><br/>

    <input type="text" id="courseTextbookTitle" placeholder="Enter Textbook Title" required>
    <input type="text" id="courseTextbookAuthor" placeholder="Enter Textbook Author" required>
    <input type="text" id="courseTextbookVersion" placeholder="Enter Textbook Version" required>
    <input type="text" id="courseTextbookISBN" placeholder="Enter Textbook ISBN" required>
    <input type="text" id="courseTextbookLink" placeholder="Enter Textbook Website Link" required><br/><br/>
    
    <button onclick="addCourse()">Add Course</button>
    </div>

    <div id="courseList"></div>

    <!-- Context Menu for Questions -->
    <div id="contextMenu" class="context-menu">
        <ul>
            <li onclick="editQuestion()">Edit Question</li>
            <li onclick="deleteQuestion()">Delete Question</li>
            <li onclick="addFeedback()">Add Feedback</li>
        </ul>
    </div>
    



    <!-- Primary Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal()">Back</button>
            <h2 id="modalTitle">Edit</h2>
            <div id="modalBody"></div>
        </div>
    </div>

    <!-- Modal for Question Selection -->
    <div id="questionModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeQuestionModal()">Back</button>
            <h2 id="questionModalTitle">Select Questions</h2>
            <div id="questionModalBody"></div>
        </div>
    </div>

<script>

//Can be used for persistent storage
var masterQuestionList = {};
var masterTestList = {};
var masterTemplateList = {};
var masterAttachmentList = {};
var courseList = [];
var masterCoverPageList = {};

/**
 * Defines the UI for a given course, used to interact with everything else
 * Preconditions: requires users provide all of the course addition data
 * Postconditions: Creates a course UI with tabbed panes for question and test data
*/
function addCourse() {
    const courseID = document.getElementById('courseID').value.trim();
    const courseName = document.getElementById('courseName').value.trim();
    const courseCRN = document.getElementById('courseCRN').value.trim();
    const courseSemester = document.getElementById('courseSemester').value;
    const textbookTitle = document.getElementById('courseTextbookTitle').value.trim();
    const textbookAuthor = document.getElementById('courseTextbookAuthor').value.trim();
    const textbookVersion = document.getElementById('courseTextbookVersion').value.trim();
    const textbookISBN = document.getElementById('courseTextbookISBN').value.trim();
    const textbookLink = document.getElementById('courseTextbookLink').value.trim();

    if (!courseID || !courseName || !courseCRN || !courseSemester || !textbookTitle || !textbookAuthor || !textbookISBN || !textbookVersion || !textbookLink) {
        alert("All fields (Course ID, Name, CRN, Semester, and Textbook Title/Author/Version/ISBN/Link) are required.");
        return;
    }

    const courseContainer = document.createElement('div');
    courseContainer.classList.add('course-container');
    courseContainer.innerHTML = `
        <details>
            <summary><strong>${courseName}</strong> (ID: ${courseID}, CRN: ${courseCRN}, ${courseSemester})</summary>
            <details>
                <summary>Questions</summary>
            <button class="add-btn" onclick="openEditor('Question', '${courseID}')">Add Question</button>
            <div class="tab-container">
                <div class="tabs">
                    <div class="tab active" onclick="switchTab(event, 'tf-${courseID}')">True/False</div>
                    <div class="tab" onclick="switchTab(event, 'mc-${courseID}')">Multiple Choice</div>
                    <div class="tab" onclick="switchTab(event, 'sa-${courseID}')">Short Answer</div>
                    <div class="tab" onclick="switchTab(event, 'es-${courseID}')">Essay</div>
                    <div class="tab" onclick="switchTab(event, 'ma-${courseID}')">Matching</div>
                    <div class="tab" onclick="switchTab(event, 'ms-${courseID}')">Multiple Selection</div>
                    <div class="tab" onclick="switchTab(event, 'fb-${courseID}')">Fill in the Blank</div>
                </div>
                <div class="tab-content active" id="tf-${courseID}"><p>True/False questions go here...</p></div>
                <div class="tab-content" id="es-${courseID}"><p>Essay questions go here...</p></div>
                <div class="tab-content" id="mc-${courseID}"><p>Multiple Choice questions go here...</p></div>
                <div class="tab-content" id="sa-${courseID}"><p>Short Answer questions go here...</p></div>
                <div class="tab-content" id="ma-${courseID}"><p>Matching questions go here...</p></div>
                <div class="tab-content" id="ms-${courseID}"><p>Multiple Selection questions go here...</p></div>
                <div class="tab-content" id="fb-${courseID}"><p>Fill in the Blank questions go here...</p></div>
            </div>
            </details>

            <details>
                <summary>Cover Pages</summary>
                    <button class="add-btn" onclick="openEditor('Cover Page', '${courseID}')">Add Cover Page</button>
                    <div id="coverpages-${courseID}"><p>You have not added any cover pages yet...</div>
            </details>

            <details>
                <summary>Templates</summary>
                    <button class="add-btn" onclick="openEditor('Template', '${courseID}')">Add Template</button>
                    <div id="templates-${courseID}"><p>You have not added any templates yet...</p></div>
            </details>

            <details>
                <summary>Tests</summary>
                <button class="add-btn" onclick="openEditor('Test', '${courseID}')">Add Test</button>
                <button class="add-btn" onclick="openImporter('Test', '${courseID}')">Import Test</button>
                <div class="tab-container">
                <div class="tabs">
                    <div class="tab active" onclick="switchTab(event, 'drafts-${courseID}')">Drafts</div>
                    <div class="tab" onclick="switchTab(event, 'published-${courseID}')">Published Tests</div>
                </div>
                <div class="tab-content active" id="drafts-${courseID}"><p>Saved drafts go here...</p></div>
                <div class="tab-content" id="published-${courseID}"><p>Published tests go here...</p></div>
            </div>
            </details>

            <details>
                <summary>Attachments</summary>
                <button class="add-btn" onclick="openEditor('Attachment', '${courseID}')">Add Attachment</button>
                <div id="attachments-${courseID}"><p>You have not uploaded any attachments yet...</p></div>
            </details>
            <button class="remove-btn" onclick="confirmRemoveCourse(this)">Remove Course</button>
        </details>
    `;

    document.getElementById('courseList').appendChild(courseContainer);
    document.getElementById('courseID').value = "";
    document.getElementById('courseName').value = "";
    document.getElementById('courseCRN').value = "";
    document.getElementById('courseSemester').value = "";
    document.getElementById('courseTextbookTitle').value = "";
    document.getElementById('courseTextbookAuthor').value = "";
    document.getElementById('courseTextbookVersion').value = "";
    document.getElementById('courseTextbookISBN').value = "";
    document.getElementById('courseTextbookLink').value = "";

    const questionList = {
        'course': courseID,
        'tf': [],
        'mc': [],
        'sa': [],
        'es': [],
        'ma': [],
        'ms': [],
        'fb': []
    };
    const testList = {
        'drafts': [],
        'published': []
    };

    let today = new Date();
    let year = today.getFullYear();
    let month = today.getMonth() + 1;
    let date = today.getDate();

    masterQuestionList[courseID] = questionList;
    masterTestList[courseID] = testList;
    masterCoverPageList[courseID] = [];
    masterTemplateList[courseID] = [];

    const templateDefault = {
        name: "System Default",
        titleFont: "Times New Roman",
        titleFontSize: 36,
        subtitleFont: "Times New Roman",
        subtitleFontSize: 24,
        bodyFont: "Times New Roman",
        bodyFontSize: 12,
        pageNumbersInFooter: true,
        pageNumbersInHeader: false,
        headerText: "",
        footerText: "Please read all questions carefully",
        coverPageType: 0,
        bonusSection: false,
        bonusQuestions: null,
        partStructure: [
            {
                partNumber: 1,
                sections: [
                    { sectionNumber: 1, questionType: "tf" }
                ]
            }
        ]
    };

    masterTemplateList[courseID].push(templateDefault);

    const coverPageDefault = {
        name: "Default 1st Test",
        testNum: 1,
        date: `${year}-${month}-${date}`,
        file: "defaultpage",
        showFilename: true,
        blank: "TR",
        instructions: "Grade according to the rubric, giving partial credit where indicated"
    };

    const coverPageDefault2 = {
        name: "Default 2nd Test",
        testNum: 2,
        date: `${year}-${month}-${date}`,
        file: "defaultpage_2",
        showFilename: true,
        blank: "TR",
        instructions: "Grade according to the rubric, giving partial credit where indicated"
    };

    const coverPageDefault3 = {
        name: "Default 3rd Test",
        testNum: 3,
        date: `${year}-${month}-${date}`,
        file: "defaultpage_3",
        showFilename: true,
        blank: "TR",
        instructions: "Grade according to the rubric, giving partial credit where indicated"
    };

    masterCoverPageList[courseID].push(coverPageDefault, coverPageDefault2, coverPageDefault3);
    updateTemplates(courseID);
    updateCoverPages(courseID);

    const thisCourse = {
        id: courseID,
        name: courseName,
        crn: courseCRN,
        sem: courseSemester,
        tbTitle: textbookTitle,
        tbAuthor: textbookAuthor,
        tbVersion: textbookVersion,
        tbISBN: textbookISBN,
        tbLink: textbookLink
    };
    courseList.push(thisCourse);
}

/**
 * Used to remove a course 
 * Precondition: the course exists
 * Postcondition: the course no longer exists
 * 
*/
function confirmRemoveCourse(button) {
    if (confirm("Are you sure you want to delete this course? This action cannot be undone.")) {
        button.closest('.course-container').remove();
    }
}

/**
 * Switches between the tabs of a tabbed pane
 * Precondition: valid tab ID to switch to
 * Postcondition: switches to that tab in the correct tabbed pane, activates a different one
*/
function switchTab(event, tabID) {
            const parentContainer = event.target.closest('.tab-container');
            const tabs = parentContainer.querySelectorAll('.tab');
            const contents = parentContainer.querySelectorAll('.tab-content');

            tabs.forEach(tab => tab.classList.remove('active'));
            contents.forEach(content => content.classList.remove('active'));

            event.target.classList.add('active');
            document.getElementById(tabID).classList.add('active');
}

/**
 * Opens the editor modal. This behaves differently depending on what is edited
 * Currently the attachment, template, question, and test editors are implemented
 * Precondition: valid course, edit button pushed
 * Postcondition: opens up a modal over the webpage content that allows you to create new data
*/
function openEditor(type, courseID) {
    const modal = document.getElementById('editModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');

    modalTitle.innerText = `Add ${type}`;

    let formContent = '';    

    if (type != "Question"){
        formContent += `
	<label>${type} Name:</label><br/>
        <input type="text" id="nameField"><br><br>
    `;
    }
    

    if (type === "Question") {
        formContent += `
            <label>Question:</label><br/>
            <textarea id="questionField" rows="5" placeholder="Enter question text here..."></textarea><br><br>
            
            <label>Question Type:</label><br/>
            <select id="typeField">
                <option value="" disabled selected>Select Question Type</option>
                <option value="tf">True/False</option>
                <option value="mc">Multiple Choice</option>
                <option value="sa">Short Answer</option>
                <option value="es">Essay</option>
                <option value="ma">Matching</option>
                <option value="ms">Multiple Selections</option>
                <option value="fb">Fill in the Blank</option>
            </select><br><br>

            <label>Correct Answer:</label><br/>
            <textarea id="answerField" rows="4" placeholder="For questions that lack a correct answer, please repeat the prompt here."></textarea><br><br>

            <label>Point Value:</label><br/>
            <input type="number" id="pointValueField" min="1"><br><br>

	    <label>Estimated Time to Solve (Minutes):</label><br/>
            <input type="number" id="qTimeField" min="1"><br><br>

            <label>Grading Instructions:</label><br/>
            <textarea id="instructionField" rows="6" placeholder="Grading instructions should be provided for partial credit, short or long answer questions, or questions where a rubric is necessary."></textarea><br><br>

            <label>Reference Text (Optional):</label><br/>
            <textarea id="refField" rows="3" placeholder="Reference text if needed..."></textarea><br><br>

	    <label>Embedded Graphic (Optional):</label><br/>
            <input type="file" id="qGraphicField" name="questionSRC"></input><br><br>
	
	    <label>Embedded Graphic for the Correct Answer (Optional):</label><br/>
            <input type="file" id="ansGraphicField" name="answerSRC"></input><br><br>
        
        <label>Instructor Comments (Optional):</label><br/>
            <textarea id="instructorCommentField" placeholder="Comments go here"></textarea><br><br>

            <button class="add-btn" onclick="addQuestion('${courseID}')">Submit Question</button>
        `;
    }

    if (type === "Cover Page"){
        //Needs: test instructions, course number, test number, date of test, filename of the test,
        //  blank for student name, and grading instructions for the key
        formContent+= `
        <div style="background:#e0e0e0;padding:20px;" id="coverPageEditor">
            <p>Create your Cover Page!</p><br/>
            <label>Test Number</label>
            <input type="number" id="tNum" min="0"/><br/>

            <label>Test Date</label>
            <input type="date" id="tDate"/><br/>

            <label>Test Filename (no extension)</label>
            <input id="filename" type="text"/><br/>

            <label>Filename Present on CoverPage</label>
            <input id="filenameTF" type="checkbox"/><br/>

            <label>Student Name Location</label>
            <select id="nameBlankSelector">
                <option value="" disabled selected>Please select a location</option>
                <option value="TR">Top Right</option>
                <option value="TL">Top Left</option>
                <option value="BT">Below the Title</option>
            </select><br/><br/>

            <label>Grading Instructions for Key</label>
            <textarea id="instructions" name="instruct" rows="3" placeholder="Add your instructions for grading here. These will go into the test key."></textarea>
            <br/>
            <button class="add-btn" onclick="submitCoverPage('${courseID}')">Submit</button>
        </div>
        `;
    }


    if (type === "Test"){
        formContent+= `
        <div style="background:#e0e0e0;padding:20px;" id="testEditor">
            <p>Choose a Template!</p><br/>
            <div id=templateSelectorPane>
                <select id=templateSelector>
                    <option value="" disabled selected>Please Select a Template</option>
                </select> <button id=templateSelection onclick="updateTestParts('${courseID}')">Select This One!</button>
                <div id="testParts"> </div>
            </div>
            <button class="add-btn" id="testDraftButton" onclick="saveTest('${courseID}', '${false}')">Save as Draft</button>
            <button class="add-btn" id="testPublishButton" onclick="saveTest('${courseID}', '${true}')">Publish Test</button>
        </div>
        `;
        setTimeout(() => {
        updateTemplateSelection(courseID);
        }, 50);
        
    }


     if (type === "Template") {
        formContent += `
            <div  style="background:#e0e0e0;padding:20px;" id="templateEditor"> 
	    <h1>Font Settings</h1>
  	    <label>Title Font and Font Size:</label><br/>
        <select id="titleFont">
            <option value="" selected disabled>Please choose a font</option>
            <option value="Times New Roman">Times New Roman</option>
            <option value="Arial">Arial</option>
            <option value="Calibri">Calibri</option>
            <option value="Helvetica">Helvetica</option>
            <option value="Georgia">Georgia</option>
            <option value="Cambria">Cambria</option>
            <option value="Garamond">Garamond</option>
        </select>
	    <input type="number" id="titleFontSize" min="1" value="36"><br/><br/>

	    <label>Subtitle Font and Font Size:</label><br/>
	    <select id="subtitleFont">
            <option value="" selected disabled>Please choose a font</option>
            <option value="Times New Roman">Times New Roman</option>
            <option value="Arial">Arial</option>
            <option value="Calibri">Calibri</option>
            <option value="Helvetica">Helvetica</option>
            <option value="Georgia">Georgia</option>
            <option value="Cambria">Cambria</option>
            <option value="Garamond">Garamond</option>
        </select>
	    <input type="number" id="subtitleFontSize" min="1" value="24"><br/><br/>

    	<label>Body Font and Font Size:</label><br/>
	    <select id="bodyFont">
            <option value="" selected disabled>Please choose a font</option>
            <option value="Times New Roman">Times New Roman</option>
            <option value="Arial">Arial</option>
            <option value="Calibri">Calibri</option>
            <option value="Helvetica">Helvetica</option>
            <option value="Georgia">Georgia</option>
            <option value="Cambria">Cambria</option>
            <option value="Garamond">Garamond</option>
        </select>
	    <input type="number" id="bodyFontSize" min="1" value="12"><br/><br/>
        
        
        <h1>Tags Section (Optional)</h1>
        <div class="form-container">
            <div class="form-group"><label>Test Name </label> <input type="text" id="tempTestName"></div>
            <div class="form-group"><label>Date </label> <input type="text" id="tempDate"></div>
            <div class="form-group"><label>Course Number </label> <input type="text" id="tempCourseNum"></div>
        </div>

  	    <h1>Header and Footer Settings</h1>
        <label>Location of Student Score Blank (On the second page of the test)</label>
        <select id="studentScoreSelector">
            <option value="" disabled selected>Please Select a Location</option>
            <option value="TR"> Top Right</option>
            <option value="TL"> Top Left</option>
        </select><br/><br/>
	    <label>Page Numbers in Header</label><br/>
	    <input type="checkbox" id="pageNumH"><br/>
	    <label>Page Numbers in Footer</label><br/>
	    <input type="checkbox" id="pageNumF"><br/><br/>
	    <textarea id="headerField" rows="3" placeholder="Enter any desired header text ..."></textarea>
	    <textarea id="footerField" rows="3" placeholder="Enter any desired footer text..."></textarea>
	    
	    <h1>Cover Page Selection</h1><br/>
	    <select id="coverPageSelector">
		    <option value="" disabled selected>Please Select a Cover Page</option>
	    </select><br/><br/>

	    <h1>Test Structure Settings</h1>
	    <label>Number of Parts:</label>
        <input type="number" id="partCount" min="1" value="1">
        <button onclick="updateParts()">Update</button>
        <div style="background:#d0d0d0;padding:20px" id="partsContainer"><p>No Parts Chosen</p></div>
            
	    <!-- I may add a button to allow for selection of specific bonus questions as part of the template later -->
	    <h1>Bonus Question Section Toggle</h1>
	    <select id="bonusToggle">
		<option value="True">Bonus Section</option>
		<option value="False">No Bonus Section</option>
	    </select><br/><br/>

        <button class="add-btn" onclick="addTemplate('${courseID}')">Submit Template</button></div>
        `;

        setTimeout(() => {
        updatePageSelection(courseID);
        }, 50);
    }


    if (type === "Attachment"){
        formContent+=`
            <input type="file" id="newAttachment" name="attachment">
	        <button class="add-btn" onclick="submitAttachment('${courseID}')">Submit Attachment</button>
        `;
   }

    // Ensure the modal content is updated
    modalBody.innerHTML = formContent;

    // Show the modal
    modal.style.display = "flex";
    setTimeout(() => {
        modal.style.opacity = "1";
    }, 10);
}

/**
 * Adding the cover page to the list of coverpages
 * Precondition: all necessary data is in the coverpage editor
 * Postcondition: cover page added to the list
*/
function submitCoverPage(courseID){
    const pageName = document.getElementById("nameField").value.trim();
    const testNumber = document.getElementById("tNum").value.trim();
    const testDate = document.getElementById("tDate").value.trim();
    const filename = document.getElementById("filename").value.trim();
    const filenameTF = document.getElementById("filenameTF").checked;
    const nameBlankSelector = document.getElementById("nameBlankSelector").value.trim();
    const gradingInstructions = document.getElementById("instructions").value.trim();

    if(!pageName || !testNumber || !testDate || !filename || !nameBlankSelector || !gradingInstructions){
        alert("Cover page name, Test number, test date, filename, name blank selection, and grading instructions are required fields!");
        return;
    }

    if(!masterCoverPageList[courseID]){
        let coverPageList = [];
        masterCoverPageList[courseID]= coverPageList;
    }


    let coverPage = {
        name: pageName,
        testNum: testNumber,
        date: testDate,
        file: filename,
        showFilename: filenameTF,
        blank: nameBlankSelector,
        instructions: gradingInstructions,
    }

    masterCoverPageList[courseID].push(coverPage);
    closeModal();
    alert("Added a cover page");
}

/**
 * Submit attachments to the attachmentList
 * Precondition: valid attachment
 * Postcondition: attachment posted to attachmentList
 * 
 * TODO: have attachment filenames be parsed here and made visible in the attachment section 
 *       (requires that you add a div container to the attachment section in addCourse)
 *       (could alternatively entail making attachments visible at a standard size by 
 *         placing them inside of an appropriately sized div container and restricting them)
 * 
 *          necessary but low priority
*/
function submitAttachment(courseID) {
    const attachment = document.getElementById("newAttachment").files[0];
    const name = document.getElementById("nameField").value.trim();

    if (!attachment || !name) {
        alert("Attachment file and name are required.");
        return;
    }

    if (!masterAttachmentList[courseID]) {
        masterAttachmentList[courseID] = [];
    }

    masterAttachmentList[courseID].push({ name: name, file: attachment });
    updateAttachments(courseID);
    closeModal();
    alert("Attachment added successfully!");
}

function updateAttachments(courseID) {
    const attachmentList = masterAttachmentList[courseID];
    const attachmentContainer = document.getElementById("attachments-" + courseID);
    attachmentContainer.innerHTML = "";

    if (attachmentList.length === 0) {
        attachmentContainer.innerHTML = '<p>You have not uploaded any attachments yet...</p>';
        return;
    }

    attachmentList.forEach((attachment, index) => {
        const attachmentDiv = document.createElement("div");
        attachmentDiv.innerHTML = `<p>Attachment ${index + 1}: ${attachment.name}</p>`;
        attachmentContainer.appendChild(attachmentDiv);
    });
}

/**
 * Adds a template to the templateList
 * Precondition: valid courseID and template info
 * Postcondition: adds a new template to the list
*/
function addTemplate(courseID) {
    const templateName = document.getElementById('nameField').value.trim();
    const coverPageType = document.getElementById('coverPageSelector').value;

    const titleFont = document.getElementById('titleFont').value.trim();
    const titleFontSize = parseInt(document.getElementById('titleFontSize').value, 10);
    const subtitleFont = document.getElementById('subtitleFont').value.trim();
    const subtitleFontSize = parseInt(document.getElementById('subtitleFontSize').value, 10);
    const bodyFont = document.getElementById('bodyFont').value.trim();
    const bodyFontSize = parseInt(document.getElementById('bodyFontSize').value, 10);

    const pageNumbersInHeader = document.getElementById('pageNumH').checked;
    const pageNumbersInFooter = document.getElementById('pageNumF').checked;

    const headerText = document.getElementById('headerField').value.trim();
    const footerText = document.getElementById('footerField').value.trim();

    const bonusSection = document.getElementById('bonusToggle').value === 'True';

    // **Improved Error Handling**
    if (!templateName) {
        alert("Error: Template Name is required.");
        return;
    }
    if (!titleFont || !subtitleFont || !bodyFont) {
        alert("Error: All font fields must be filled.");
        return;
    }
    if (isNaN(titleFontSize) || isNaN(subtitleFontSize) || isNaN(bodyFontSize)) {
        alert("Error: Font sizes must be valid numbers.");
        return;
    }
    if (!coverPageType) {
        alert("Error: You must choose a cover page type.");
        return;
    }
    const partStructure = collectPartStructure();
    if (!partStructure) {
        alert("Error: Template must include a valid part structure.");
        return;
    }

    const templateData = {
        name: templateName,
        titleFont: titleFont,
        titleFontSize: titleFontSize,
        subtitleFont: subtitleFont,
        subtitleFontSize: subtitleFontSize,
        bodyFont: bodyFont,
        bodyFontSize: bodyFontSize,
        pageNumbersInHeader: pageNumbersInHeader,
        pageNumbersInFooter: pageNumbersInFooter,
        headerText: headerText,
        footerText: footerText,
        coverPageType: coverPageType,
        partStructure: partStructure,
        bonusSection: bonusSection
    };

    if (!masterTemplateList[courseID]) {
        masterTemplateList[courseID] = [];
    }

    masterTemplateList[courseID].push(templateData);

    alert("Template added successfully!");
    console.log("Saved Template:", templateData);

    updateTemplates(courseID);
    closeModal();
}


/**
 * This grabs the structure of the parts and sections inside of a template.
 * It makes the structure of the test that is outlined by a template a lot easier
 * to work with in other methods, since you can grab a template's partStructure instead of
 * its sections and parts and questions invidually.
 * Precondition: valid part and section count choices, valid question type choices
 * Postcondition: outputs a structure of parts and sections for a template
*/
function collectPartStructure() {
    const partCount = parseInt(document.getElementById('partCount').value);
    const partStructure = [];

    // Validate part count
    if (isNaN(partCount) || partCount < 1) {
        alert("Error: Please enter a valid number of parts.");
        return null; // Return null instead of undefined to prevent further execution
    }

    for (let i = 1; i <= partCount; i++) {
        const sectionCountInput = document.getElementById(`sectionCount-${i}`);
        
        if (!sectionCountInput) {
            alert(`Error: Section count input is missing for Part ${i}.`);
            return null;
        }

        const sectionCount = parseInt(sectionCountInput.value);
        
        // Validate section count
        if (isNaN(sectionCount) || sectionCount < 1) {
            alert(`Error: Please enter a valid number of sections for Part ${i}.`);
            return null;
        }

        const part = {
            partNumber: i,
            sections: []
        };

        const sectionContainer = document.getElementById(`sectionsContainer-${i}`);
        if (!sectionContainer) {
            alert(`Error: Sections container missing for Part ${i}.`);
            return null;
        }

        const sectionSelects = sectionContainer.querySelectorAll('select');

        if (sectionSelects.length !== sectionCount) {
            alert(`Error: The number of section selectors does not match the section count for Part ${i}.`);
            return null;
        }

        sectionSelects.forEach((select, j) => {
            if (!select.value) {
                alert(`Error: Please select a question type for Section ${j + 1} in Part ${i}.`);
                return null;
            }
            
            part.sections.push({
                sectionNumber: j + 1,
                questionType: select.value
            });
        });

        partStructure.push(part);
    }

    return partStructure;
}


/**
 * Updates the potential options for cover pages when you open the template editor
 * Precondition: Valid courseID
 * Postcondition: populated selector in template editor (editmodal)
*/
function updatePageSelection(courseID) {
    const selection = document.getElementById("coverPageSelector");

    // Clear existing options
    selection.innerHTML = '<option value="" disabled selected>Please Select a Cover Page</option>';

    if (!masterCoverPageList[courseID] || masterCoverPageList[courseID].length === 0) {
        alert("No cover pages available for this course!");
        return;
    }

    masterCoverPageList[courseID].forEach((page, index) => {
        const newOption = document.createElement("option");
        newOption.value = index; 
        newOption.textContent = page.name;
        selection.appendChild(newOption);
    });
}


/**
 * Updates the potential options for templates when you open the test editor
 * Precondition: valid courseID
 * Postcondition: populated selector in test editor (editmodal)
*/
function updateTemplateSelection(courseID){
    if(!masterTemplateList[courseID]){
            masterTemplateList[courseID] = [];
        }else if(!masterTemplateList[courseID][0]){
            alert("No templates available for this course!");
        }else{
            const templateList = masterTemplateList[courseID];
            templateList.forEach((template, index)=>{
            const selection = document.getElementById("templateSelector");
            const newoption = document.createElement("option");
            newoption.value = index;
            newoption.textContent= template.name;
            selection.appendChild(newoption);
        });
    }
}

function updateAttachments(courseID){
    let attachmentList = masterAttachmentList[courseID];
    let attachmentContainer = document.getElementById("attachments-" + courseID);
    attachmentContainer.innerHTML = "";
    attachmentList.forEach((attachment, index) => {
        let attachmentDiv = document.createElement("div");
        attachmentDiv.innerHTML = `<p>Attachment ${index + 1}: ${attachment.name}</p>`;
        attachmentContainer.appendChild(attachmentDiv);
    });
}

/**
 * Adds the question from the currently open editModal in question mode.
 * Preconditions: expects a valid courseID, and for all of the required fields to be present
 * Postconditions: adds the question to the appropriate array for its type in the course questionList
 * 
 * TODO: change the question addition to account for formulas, multiple possible options and inputs, etc..
 *          priority (medium, delayed: cannot be worked on until the editor is altered. check the inside
 *                      of the openEditor function for more information)
 * 
 *       create feedback{} and add it to question data
*/
function addQuestion(courseID) {
    const prompt = document.getElementById("questionField").value.trim();
    const solution = document.getElementById("answerField").value.trim();
    const type = document.getElementById("typeField").value;
    const points = document.getElementById("pointValueField").value.trim();
    const instructions = document.getElementById("instructionField").value.trim();
    const refText = document.getElementById("refField").value.trim();
    const time = document.getElementById("qTimeField").value.trim();
    const graphic = document.getElementById("qGraphicField").value;
    const ansgraphic = document.getElementById("ansGraphicField").value;
    const instcomm = document.getElementById("instructorCommentField").value;


    if (!prompt || !solution || !type || !points || !instructions || !time) {
        alert("Some fields (Question, Question Type, Correct Answer, Default Point Value, and Grading Instructions) are required.");
        return;
    }

    const question = {
	text: prompt,
	answer: solution,
	qtype: type,
	score: points,
	directions: instructions,
	reference: refText,
	eta: time,
	img: graphic,
	ansimg: ansgraphic,
    comments: instcomm,
    tests: [],
    published: 0
	}
    masterQuestionList[courseID][type].push(question);
    lastquestion = masterQuestionList[courseID][type].length-1;
    updateQuestionTabs(type, courseID);
    alert("Added the " + masterQuestionList[courseID][type][lastquestion].qtype.toUpperCase() + " Question: \n\"" + masterQuestionList[courseID][type][lastquestion].text + "\"\n (Worth " + masterQuestionList[courseID][type][lastquestion].score + " points!)");

    closeModal();
}

/**
 * Updates the test editor to have the appropriate parts and section options
 * Preconditions: A valid template with part and sections defined correctly, a valid course ID
 * Postconditions: Populated testeditor with all of the appropriate parts and sections
 * 
 * TODO: Check if the template has a bonus section, and add a part with one section if so.
 *       Let the teacher choose what type of question the bonus section should include
 *       Then update the section to have the appropriate syntax
*/
function updateTestParts(courseID) {
    const templateIndex = document.getElementById("templateSelector").value;
    if (!templateIndex) {
        alert("Please select a template first");
        return;
    }
    
    const template = masterTemplateList[courseID][templateIndex];
    const partStructure = template.partStructure;
    
    let test = document.getElementById("testParts");
    test.innerHTML = ""; // Clear existing content

    // Loop through each part in the template structure
    for (let i = 0; i < partStructure.length; i++) {
        let partContainer = document.createElement("div");
        partContainer.style.padding = '5px';
        partContainer.style.marginBottom = '8px';
        partContainer.style.borderBottom = '1px solid #ccc';
        partContainer.id = `part-${i}-container`;

        let partNum = i + 1;
        partContainer.innerHTML = `<h2>Part ${partNum}</h2>`;

        // Loop through each section in this part
        const sections = partStructure[i].sections;
        for (let j = 0; j < sections.length; j++) {
            let sectionContainer = document.createElement('div');
            sectionContainer.style.padding = '5px';
            sectionContainer.style.marginBottom = '8px';
            sectionContainer.style.borderBottom = '1px solid #ccc';
            sectionContainer.style.backgroundColor = '#d3d3d3';
            sectionContainer.id = `part-${i}-section-${j}-container`;

            let sectionNum = j + 1;
            const questionType = sections[j].questionType.toLowerCase();

            sectionContainer.innerHTML = `
                <h3>Section ${sectionNum}: ${questionType.toUpperCase()} Questions</h3>
                <button class="add-btn" onclick="openQuestionModal('${courseID}', ${i}, ${j}, '${questionType}')">Choose Questions</button>
                <div class="selected-questions"></div>
            `;

            partContainer.appendChild(sectionContainer);
        }

        test.appendChild(partContainer);
    }
}

/**
 * This rather involved function saves the test based on all the info in the test editor.
 * Preconditions: a valid courseID, one of two save buttons pressed, a test name, a valid template
 * Postconditions: saves the test as either a draft or published test.
 * 
 * TODO: update all questions used on the test, adding the test to their tests[] value and 
 *       setting their published value to 1, if they are published, preventing their deletion
 * 
 *       create discussions[] and then create feedback[] with discussions[] as an element of it
 *       then finally add discussions[] to testdata
 *       does not need exactly this implementation, but it could be useful
*/
function saveTest(courseID, isPublished) {
    const testName = document.getElementById("nameField").value.trim();
    if (!testName) {
        alert("Test Name is required.");
        return;
    }

    
    const templateIndex = document.getElementById("templateSelector").value;
    if (!templateIndex) {
        alert("Please select a template first");
        return;
    }
    
    const template = masterTemplateList[courseID][templateIndex];
    
    const testData = {
        name: testName,
        template: template.name,
        templateIndex: templateIndex,
        parts: []
    };
    
    // Loop through all parts and sections rendered in the UI
    const testParts = document.getElementById("testParts");
    const partContainers = testParts.querySelectorAll('[id^="part-"][id$="-container"]');
    
    partContainers.forEach((partContainer, partIndex) => {
        const partData = {
            partNumber: partIndex + 1,
            sections: []
        };
        
        // Find all section containers within this part
        const sectionContainers = partContainer.querySelectorAll('[id^="part-' + partIndex + '-section-"]');
        
        sectionContainers.forEach((sectionContainer, sectionIndex) => {
            const questionType = template.partStructure[partIndex].sections[sectionIndex].questionType;
            const selectedQuestionsDiv = sectionContainer.querySelector('.selected-questions');
            
            // Skip sections with no questions
            if (!selectedQuestionsDiv || !selectedQuestionsDiv.children.length) {
                return;
            }
            
            const sectionData = {
                sectionNumber: sectionIndex + 1,
                questionType: questionType,
                questions: []
            };
            
            // Get all question divs (skip the first child which is the section points setter)
            const questionDivs = selectedQuestionsDiv.querySelectorAll('div[style*="border-radius"]');
            
            questionDivs.forEach((questionDiv) => {
                const questionIndex = questionDiv.dataset.questionIndex;
                const pointsInput = questionDiv.querySelector('.question-points');
                const points = pointsInput ? parseInt(pointsInput.value) : 1; //if there are no points, make it 1 point
                
                // Get the question from master list and clone it
                const question = JSON.parse(JSON.stringify(masterQuestionList[courseID][questionType.toLowerCase()][questionIndex]));
                
                // Update points for this clone if they were changed
                question.score = points;
                
                // Add to the questions for this section
                sectionData.questions.push(question);
            });
            
            partData.sections.push(sectionData);
        });
        
        testData.parts.push(partData);
    });
    
    // Save the test data
    if (!masterTestList[courseID]) {
        masterTestList[courseID] = { drafts: [], published: [] };
    }
    
    const targetList = isPublished === 'true' ? masterTestList[courseID].published : masterTestList[courseID].drafts;
    targetList.push(testData);
    
    alert(`Test "${testName}" saved successfully as ${isPublished === 'true' ? "Published" : "Draft"}!`);
    updateTestTabs(courseID);
    closeModal();
}

/**
 * Opens up the questionModal and populates it with questions of the appropriate type. 
 * If such questions exist, creates checkboxes next to each one to be used for selecting questions.
 * Preconditions: openQuestionModal expects a valid courseID, part number, section number, and question type
 * Postconditions: opens up the question modal with questions of the appropriate type for the correct course
*/
function openQuestionModal(courseID, partNum, sectionNum, type) {
    const modal = document.getElementById("questionModal");
    const modalTitle = document.getElementById("questionModalTitle");
    const modalBody = document.getElementById("questionModalBody");
    
    // Check if we have questions of this type
    if (!masterQuestionList[courseID][type] || masterQuestionList[courseID][type].length === 0) {
        alert("No questions available of this type!");
        return;
    }

    const questions = masterQuestionList[courseID][type];
    modalBody.innerHTML = ""; // Clear existing content

    // Store the part/section info in the modal for later use
    modalBody.dataset.courseId = courseID;
    modalBody.dataset.partNum = partNum;
    modalBody.dataset.sectionNum = sectionNum;
    modalBody.dataset.questionType = type;

    const questionContainer = document.createElement('div');
    questionContainer.style.padding = '5px';
    questionContainer.style.marginBottom = '8px';
    questionContainer.style.borderBottom = '1px solid #ccc';

    questions.forEach((question, index) => {
        const element = document.createElement("div");
        element.style.padding = '8px';
        element.style.margin = '5px 0';
        element.style.backgroundColor = '#f0f0f0';
        element.style.borderRadius = '4px';
        element.innerHTML = `
            <input type="checkbox" id="q-${index}" value="${index}">
            <label for="q-${index}">${question.text} (${question.score} Points)</label>
        `;   
        questionContainer.appendChild(element);
    });

    const submitButton = document.createElement('button');
    submitButton.className = 'add-btn';
    submitButton.textContent = 'Add Selected Questions';
    submitButton.onclick = function() {
        addSelectedQuestions();
    };
    questionContainer.appendChild(submitButton);

    modalTitle.innerText = `Select ${type.toUpperCase()} Questions`;
    modalBody.appendChild(questionContainer);

    modal.style.display = "flex";
    setTimeout(() => {
        modal.style.opacity = "1";
    }, 10);
}

/**
 * This adds the questions selected in the questionModal to the test editor.
 * It uses data included in the modalBody using the dataset property from HTMLElement
 * Preconditions: all data requested from dataset is entered in the modalBody
 * Postcondition: returns to test editor with all of the questions added
*/
function addSelectedQuestions() {
    const modalBody = document.getElementById("questionModalBody");
    const courseID = modalBody.dataset.courseId;
    const partNum = parseInt(modalBody.dataset.partNum);
    const sectionNum = parseInt(modalBody.dataset.sectionNum);
    const type = modalBody.dataset.questionType;
    
    //find all of the checkbox type inputs in the questionModalBody element and selected by the user
    const checkboxes = document.querySelectorAll('#questionModalBody input[type="checkbox"]:checked');
    //returns an array of selected question IDs
    
    if (checkboxes.length === 0) {
        alert("Please select at least one question.");
        return;
    }
    
    const selectedIndices = Array.from(checkboxes).map(cb => parseInt(cb.value));
    const questions = selectedIndices.map(index => masterQuestionList[courseID][type][index]);
    
    // Update the test part on screen
    const sectionContainer = document.getElementById(`part-${partNum}-section-${sectionNum}-container`);
    const selectedQuestionsDiv = sectionContainer.querySelector('.selected-questions');
    selectedQuestionsDiv.innerHTML = '';
    
    // Create a section-wide point value input
    const sectionPointsDiv = document.createElement("div");
    sectionPointsDiv.innerHTML = `
        <label>Set All Points for This Section: </label>
        <input type="number" id="section-${partNum}-${sectionNum}-points" min="1" value="1" style="width: 60px;">
        <button onclick="updateSectionPoints(${partNum}, ${sectionNum})">Apply</button>
        <hr>
    `;
    selectedQuestionsDiv.appendChild(sectionPointsDiv);

    // Add each selected question to the section
    questions.forEach((question, index) => {
        const questionElement = document.createElement("div");
        questionElement.style.padding = "8px";
        questionElement.style.margin = "5px 0";
        questionElement.style.backgroundColor = "#f0f0f0";
        questionElement.style.borderRadius = "4px";
        questionElement.dataset.questionIndex = selectedIndices[index]; // Store original index

        questionElement.innerHTML = `
            <p>${question.text}</p>
            <label>Points: </label>
            <input type="number" class="question-points" min="1" value="${question.score}" style="width: 60px;">
        `;

        selectedQuestionsDiv.appendChild(questionElement);
    });

    alert(`Added ${questions.length} questions to Part ${partNum + 1}, Section ${sectionNum + 1}`);

    closeQuestionModal();
}

/**
 * This code is for the test editor. It updates the points for every question inside a section,
 * when the button is pressed for that section. This function grabs the section-X-Y-points value
 * where X is the part number and Y is the section number. This points to a numeric field that allows selection
 * of different point values per section. 
 * It takes the value from that selection and applies it to all of the elements whose IDs include question-points
 * Precondition: valid part and section number, test editor open and functional
 * Postcondition: All question point values in the section will be updated to the new value
*/
function updateSectionPoints(partNum, sectionNum) {
    const newPointValue = document.getElementById(`section-${partNum}-${sectionNum}-points`).value;

    if (!newPointValue || newPointValue < 1) {
        alert("Please enter a valid point value.");
        return;
    }

    // Select all question inputs in this section
    const sectionContainer = document.getElementById(`part-${partNum}-section-${sectionNum}-container`);
    const pointInputs = sectionContainer.querySelectorAll('.question-points');

    pointInputs.forEach(input => {
        input.value = newPointValue;
    });

    alert(`Updated all questions in Part ${partNum + 1}, Section ${sectionNum + 1} to ${newPointValue} points each.`);
}

/**
 * This function updates the number of parts in the template editor selected in the part count value
 * Assuming the number is above one, it creates section containers with a selection for section number.
 * It creates as many sections as the number specified in the sectionInput number input
 * Preconditions: Valid part count selected, template editor open
 * Postconditions: Updates template editor with a set of parts with section selection options
 */
function updateParts() {
    const partCount = parseInt(document.getElementById("partCount").value);
    const partsContainer = document.getElementById("partsContainer");
    partsContainer.innerHTML = ""; // Clear existing content

    for (let i = 1; i <= partCount; i++) {
        let sectionInputId = `sectionCount-${i}`;
        partsContainer.innerHTML += `
            <div id="part-${i}">
                <label>Sections in Part ${i}:</label>
                <input type="number" id="${sectionInputId}" min="1" value="1"> //a numeric input for section count
                <button onclick="updateSections(${i})">Update</button>
                <div style="background:#c0c0c0;padding:20px;" id="sectionsContainer-${i}"><p>No Sections Chosen...</p></div>
            </div><br>
        `;
    }
}

/**
 * Updates the sections within the template editor. This is called when the number of sections
 * in a part has been chosen. It brings up a set of selectors for each section to choose the
 * question type for each section.
 * Precondition: Have the template editor open, a valid partNumber is passed
 * Postcondition: Should create a dropdown selector to determine the question type
*/
function updateSections(partNumber) {
    const sectionCount = parseInt(document.getElementById(`sectionCount-${partNumber}`).value);
    const sectionsContainer = document.getElementById(`sectionsContainer-${partNumber}`);
    sectionsContainer.innerHTML = ""; // Clear old sections

    for (let j = 1; j <= sectionCount; j++) {
        sectionsContainer.innerHTML += `
            <label>Question Type for Section ${j}:</label>
            <select>
                <option value="tf">True/False</option>
                <option value="mc">Multiple Choice</option>
                <option value="sa">Short Answer</option>
                <option value="es">Essay</option>
                <option value="ma">Matching</option>
                <option value="ms">Multiple Selections</option>
                <option value="fb">Fill in the Blank</option>
            </select><br>
        `;
    }
}

/**
 * Updates the question tab specified by the courseID and type supplied.
 * Preconditions: courseID refers to a valid courseID, type refers to a valid lowercase question type
 * Postconditions: updated question tabs, with test question and points listed.
*/
function updateQuestionTabs(type, courseID) {
    const tabContent = document.getElementById(`${type}-${courseID}`);
    tabContent.innerHTML = '';
    const questionList = masterQuestionList[courseID][type];
    if (questionList.length === 0) {
        tabContent.innerHTML = '<p>No questions available...</p>';
        return;
    }

    questionList.forEach((question, index) => {
        const questionContainer = document.createElement('div');
        questionContainer.classList.add('context-menu-target');
        questionContainer.style.padding = '5px';
        questionContainer.style.marginBottom = '8px';
        questionContainer.style.borderBottom = '1px solid #ccc';
        questionContainer.dataset.questionIndex = index; // Store the question index
        questionContainer.dataset.courseID = courseID;
        questionContainer.dataset.questionType = type;

        const questionElement = document.createElement('p');
        questionElement.textContent = `${question.text} (${question.score} points)`;

        questionContainer.appendChild(questionElement);
        tabContent.appendChild(questionContainer);

        console.log(`Added contextmenu event listener to question index: ${index}`);
    });
}

function updateCoverPages(courseID) {
    const pages = masterCoverPageList[courseID];
    const pageTabContent = document.getElementById("coverpages-" + courseID);
    pageTabContent.innerHTML = "";

    if (pages.length === 0) {
        pageTabContent.innerHTML = '<p>No cover pages available...</p>';
    } else {
        pages.forEach((page, index) => {
            const pageContainer = document.createElement('div');
            pageContainer.classList.add('context-menu-target');
            pageContainer.style.padding = '5px';
            pageContainer.style.marginBottom = '8px';
            pageContainer.style.borderBottom = '1px solid #ccc';
            pageContainer.dataset.pageIndex = index;
            pageContainer.dataset.courseID = courseID;

            const pageElement = document.createElement('p');
            pageElement.textContent = page.name;

            pageContainer.appendChild(pageElement);
            pageTabContent.appendChild(pageContainer);

            console.log(`Added contextmenu event listener to page index: ${index}`);
        });
    }
}

function updateTemplates(courseID) {
    const templates = masterTemplateList[courseID];
    const templateTabContent = document.getElementById("templates-" + courseID);
    templateTabContent.innerHTML = "";

    if (templates.length === 0) {
        templateTabContent.innerHTML = '<p>No templates available...</p>';
    } else {
        templates.forEach((template, index) => {
            const templateContainer = document.createElement('div');
            templateContainer.classList.add('context-menu-target');
            templateContainer.style.padding = '5px';
            templateContainer.style.marginBottom = '8px';
            templateContainer.style.borderBottom = '1px solid #ccc';
            templateContainer.dataset.templateIndex = index;
            templateContainer.dataset.courseID = courseID;

            const templateElement = document.createElement('p');
            templateElement.textContent = template.name;

            templateContainer.appendChild(templateElement);
            templateTabContent.appendChild(templateContainer);

            console.log(`Added contextmenu event listener to template index: ${index}`);
        });
    }
}

function updateTestTabs(courseID) {
    // For drafts tab
    const draftsTabContent = document.getElementById(`drafts-${courseID}`);
    draftsTabContent.innerHTML = '';
    const draftsTestList = masterTestList[courseID]['drafts'];

    if (draftsTestList.length === 0) {
        draftsTabContent.innerHTML = '<p>No draft tests available...</p>';
    } else {
        draftsTestList.forEach((test, index) => {
            const testContainer = document.createElement('div');
            testContainer.classList.add('context-menu-target');
            testContainer.style.padding = '5px';
            testContainer.style.marginBottom = '8px';
            testContainer.style.borderBottom = '1px solid #ccc';
            testContainer.dataset.testIndex = index; // Store the test index
            testContainer.dataset.courseID = courseID;
            testContainer.dataset.testType = 'draft';

            const testElement = document.createElement('p');
            testElement.textContent = test.name;

            testContainer.appendChild(testElement);
            draftsTabContent.appendChild(testContainer);

            console.log(`Added contextmenu event listener to test index: ${index}`);
        });
    }

    // For published tab
    const publishedTabContent = document.getElementById(`published-${courseID}`);
    publishedTabContent.innerHTML = '';
    const publishedTestList = masterTestList[courseID]['published'];

    if (publishedTestList.length === 0) {
        publishedTabContent.innerHTML = '<p>No published tests available...</p>';
    } else {
        publishedTestList.forEach((test, index) => {
            const testContainer = document.createElement('div');
            testContainer.classList.add('context-menu-target');
            testContainer.style.padding = '5px';
            testContainer.style.marginBottom = '8px';
            testContainer.style.borderBottom = '1px solid #ccc';
            testContainer.dataset.testIndex = index; // Store the test index
            testContainer.dataset.courseID = courseID;
            testContainer.dataset.testType = 'published';

            const testElement = document.createElement('p');
            testElement.textContent = test.name;

            testContainer.appendChild(testElement);
            publishedTabContent.appendChild(testContainer);

            console.log(`Added contextmenu event listener to test index: ${index}`);
        });
    }
}

/**
 * This function grabs the courseSemester selector at the top of the course addition page
 * and updates it to include the current school year rather than a standard set of seasons.
 * For example, in the 2024-2025 school year the values would be Fall 2024, Winter 2024, Spring 2025, Summer 2025
 * Precondition: courseSemester selector exists
 * Postcondition: courseSemester selector should have values equal to the current school year
*/
function updateSemesterOptions() {
    const select = document.getElementById('courseSemester');
    select.innerHTML = ''; // Clear existing options
    const option = document.createElement('option');

    // Create an initial disabled option in the selector
    option.value = '';
    option.textContent = 'Please Choose a Semester';
    option.disabled = true;
    select.appendChild(option);
    option.selected = true;

    // Get the current date
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth() + 1; 

    let N, N_plus_1; 
    if (month < 6) { 
        N = year - 1;
        N_plus_1 = year;
    } else { 
        N = year;
        N_plus_1 = year + 1;
    }

    let semesters;
    if (month >= 6 && month <= 8) {
        semesters = [
            `Fall ${N}`,
            `Winter ${N}`,
            `Spring ${N_plus_1}`,
            `Summer ${N_plus_1}`
        ];
    } else {
        semesters = [
            `Fall ${N}`,
            `Winter ${N}`,
            `Spring ${N_plus_1}`,
            `Summer ${N_plus_1}`
        ];
    }

    // Append semester options to the dropdown
    semesters.forEach(semester => {
        const option = document.createElement('option');
        option.value = semester;
        option.textContent = semester;
        select.appendChild(option);
    });
}


/**
 * This triggers whenever reloading or exiting the page/tab, and gives a warning 
 * that some of the data may not be saved.
*/
window.onbeforeunload = function(event){
    event.returnValue = "Warning! Data entered may not be saved!";
};

/**
 * This gets the editModal and makes it invisible and impossible to interact with
 * Precondition: This assumes the questionModal has a display other than none (likely flex) 
 * Be careful not to mix this up with closeQuestionModal, as the two modals are separate and designed to be able to exist simultaneously
 */
function closeModal() {
    document.getElementById("editModal").style.display = "none";
    document.getElementById("editModal").style.opacity = "0";
}

/**
 * This gets the questionModal and makes it invisible and impossible to interact with
 * Precondition: This assumes the questionModal has a display other than none (likely flex)
*/
function closeQuestionModal(){
    document.getElementById("questionModal").style.display = "none";
    document.getElementById("questionModal").style.opacity = "0";
}

/**
 * This event listener loads whenever the page is loaded.
 * DOM (Document Object Model) is a way that Javascript can interact with HTML/XML code.
 * When called, this updates the semester options in the course info block.
 * If the semester options are just Spring, Summer, Fall, and Winter without a year, then that means that
 * somewhere in the code loaded prior to this is an error which prevents this from being called.
*/
document.addEventListener("DOMContentLoaded", updateSemesterOptions);

document.addEventListener('contextmenu', function (event) {
    const target = event.target.closest('.context-menu-target');
    if (target) {
        event.preventDefault();
        const contextMenu = document.getElementById('contextMenu');
        contextMenu.style.top = `${event.clientY}px`;
        contextMenu.style.left = `${event.clientX}px`;
        contextMenu.style.display = 'block';

        // Store the relevant data in the context menu for later use
        contextMenu.dataset.questionIndex = target.dataset.questionIndex;
        contextMenu.dataset.courseID = target.dataset.courseID;
        contextMenu.dataset.questionType = target.dataset.questionType;
        contextMenu.dataset.testIndex = target.dataset.testIndex;
        contextMenu.dataset.testType = target.dataset.testType;

        console.log(`Context menu opened for target:`, target);
    } else {
        const contextMenu = document.getElementById('contextMenu');
        contextMenu.style.display = 'none';
    }
});

document.addEventListener('click', function () {
    const contextMenu = document.getElementById('contextMenu');
    contextMenu.style.display = 'none';
});

function editQuestion() {
    const contextMenu = document.getElementById('contextMenu');
    const questionIndex = contextMenu.dataset.questionIndex;
    const courseID = contextMenu.dataset.courseID;
    const questionType = contextMenu.dataset.questionType;

    const question = masterQuestionList[courseID][questionType][questionIndex];

    // Open the edit modal and populate it with the question data
    const modal = document.getElementById('editModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');

    modalTitle.innerText = 'Edit Question';

    const formContent = `
        <label>Question:</label><br/>
        <textarea id="editQuestionField" rows="5">${question.text}</textarea><br><br>
        <label>Correct Answer:</label><br/>
        <textarea id="editAnswerField" rows="4">${question.answer}</textarea><br><br>
        <label>Point Value:</label><br/>
        <input type="number" id="editPointValueField" min="1" value="${question.score}"><br><br>
        <label>Grading Instructions:</label><br/>
        <textarea id="editInstructionField" rows="6">${question.directions}</textarea><br><br>
        <button class="add-btn" onclick="submitEditQuestion('${courseID}', '${questionType}', ${questionIndex})">Submit Edit</button>
    `;

    modalBody.innerHTML = formContent;
    modal.style.display = 'flex';
    setTimeout(() => {
        modal.style.opacity = '1';
    }, 10);
}

function submitEditQuestion(courseID, questionType, questionIndex) {
    const text = document.getElementById('editQuestionField').value.trim();
    const answer = document.getElementById('editAnswerField').value.trim();
    const score = document.getElementById('editPointValueField').value.trim();
    const directions = document.getElementById('editInstructionField').value.trim();

    if (!text || !answer || !score || !directions) {
        alert("All fields are required.");
        return;
    }

    const question = masterQuestionList[courseID][questionType][questionIndex];
    question.text = text;
    question.answer = answer;
    question.score = score;
    question.directions = directions;

    updateQuestionTabs(questionType, courseID);
    closeModal();
    alert("Question edited successfully!");
}

function deleteQuestion() {
    const contextMenu = document.getElementById('contextMenu');
    const questionIndex = contextMenu.dataset.questionIndex;
    const courseID = contextMenu.dataset.courseID;
    const questionType = contextMenu.dataset.questionType;

    if (confirm("Are you sure you want to delete this question? This action cannot be undone.")) {
        masterQuestionList[courseID][questionType].splice(questionIndex, 1);
        updateQuestionTabs(questionType, courseID);
        alert("Question deleted successfully!");
    }
}

/**TODO: Add edit functionality to elements with right click menu
 * (modifying all of the code that saves/adds/updates content using the data HTMLELEMENT will help)
 * (use it to store the question data inside of the div container when updating tabs)
 * (then pull that data for use here to open up a new function using the editModal that mimics the
 *  original except that it does not add new data but updates old data)
 * (HIGH PRIORITY BUT ALSO VERY VERY TROUBLESOME TO IMPLEMENT NOW)
*/



//TODO: add feedback page (using editmodal for this is fine) that stores both feedback on questions/tests
// and also replies to said feedback 
// every feedback{} element should include a discussion[] element value to its initial post key

</script>
</body>
</html>